{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","slice","protoTyes","PropTypes","number","isRequired","string","arrayOf","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","href","Detail","props","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74901e7e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n/*component가 state를 필요없을때 class component를 쓸필요는 없음 고로\r\nmovies component는 state를 필요로 하지 않으므로 function component를 씀 \r\ngenres.map( (genre, index)에서 map은 key값(사용자 맘대로 변수명 부여(index) )을 따로 제공함\r\nsummary.length를 이용해 값을 알아온다음, {summary.slice(0,140)}에서 slice(시작점,끝점) 만 보여줌\r\nsummary는 영화 소개글\r\nLink(링크,라우터) => `/movie/${id}`페이지에 object를 전달 -> state: {props}\r\n${id}는 j쿼리를 이용하여 id값을 알아서 찾아오는것\r\n*/\r\nfunction Movie({ id, year, title, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <Link to={{\r\n            pathname: `/movie/${id}`,\r\n            state: {\r\n                year,\r\n                title, \r\n                summary, \r\n                poster, \r\n                genres\r\n            }\r\n        }}>\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                    {genres.map( (genre, index) => (\r\n                        <li key={index} className=\"genres__genre\">\r\n                            {genre}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0,180)}...</p>\r\n            </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\n//id, title 등 값이 number, String 등 맞는지 확인하고 아닐시 호출 않함\r\nMovie.protoTyes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import React from 'react';\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\n//state로 데이터 기본설정을 함, class Home == component class\r\nclass Home extends React.Component {\r\n    state = {\r\n        isLoading: true,\r\n        movies: []\r\n    };\r\n    /* getMovies = async () => {}; === getMovies = async function(){}; \r\n    async,await는 axios.get은 완료되기까지 시간이 필요하기에 async,await를 넣음(비동기방식),\r\n    async와await는 같이 쓰임, axios.get(API url)\r\n    console.log(movies);로 확인해서 찾고자하는 값 위치를 알아옴\r\n    movies에 있는 data에 있는 movies 배열만 꺼내올것 즉,\r\n    const data 배열안에 또다른 data 배열안에 movies배열값을 가져옴\r\n    setState로 movies에 대한 값을 바꿀수있게 함, isLoading은 false로 바꿈\r\n    list_movies.json.sort_by=rating, sort_by=rating은 rating(레이팅)별로 정렬함*/\r\n    getMovies = async () => {\r\n        const {\r\n            data: { \r\n                data: { movies }\r\n            }\r\n        } = await axios.get(\r\n            \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json.sort_by=rating\"\r\n            );\r\n        this.setState({ movies, isLoading: false });\r\n    }\r\n\r\n    /* render() === component 가 실행(mount)되면 getMovies();를 호출함  */\r\n    componentDidMount() {\r\n       this.getMovies();\r\n    }   \r\n\r\n    /*isLoading이 true가 아니라면 movies를 보여줌\r\n    {movies.map(movie => (~~ ))} == {movies.map(function(map) {(~~)} } \r\n    {movies.map -> 배열(object list)을 map에 넣음\r\n    <Movie ~~~ /> ==> Movie에 있는 props를 불러온것 변수명={data안에movie.실제값 위치},\r\n    key는 기본키 이므로 꼭 넣어주어야 함\r\n    react에서는 class대신 className을 써야함 왜냐하면 component class와 헷갈리기 때문임\r\n    */\r\n    render() {\r\n        const { isLoading, movies } = this.state;\r\n        return (\r\n        <section className=\"container\">\r\n            {isLoading ? (\r\n            <div className=\"loader\">\r\n                <div className=\"loading\"></div>\r\n                <span className=\"loader__text\">Loading..</span>\r\n            </div>\r\n            ) : ( \r\n            <div className=\"movies\">\r\n                {movies.map(movie => (\r\n                <Movie \r\n                key={movie.id}\r\n                id={movie.id} \r\n                year={movie.year} \r\n                title={movie.title} \r\n                summary={movie.summary} \r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres} \r\n                /> \r\n                ))}\r\n            </div>\r\n            )}\r\n        </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About() {\r\n    return (\r\n    <div className=\"about__container\">\r\n      <div className=\"about__icons\">\r\n      <a href=\"https://github.com/JH-1435\">\r\n      <i className=\"fab fa-github\"></i>\r\n      </a>\r\n      </div>\r\n\r\n      <div className=\"about__info\">\r\n        <span>Click this icons then,</span>\r\n        <span>you can go to My Git Page</span>\r\n      </div>\r\n\r\n      <div className=\"about__descrption\">\r\n      <span>리액트로 만든 첫번째 앱입니다.</span>\r\n      <span>컴포넌트를 생성하고 사용하는 방법,</span>\r\n      <span>라우터와 라우트를 통한 페이지 이동을 함.</span>\r\n      </div>\r\n    </div>\r\n );\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\nimport \"./Detail.css\";\r\n\r\n/* Movie 링크(props가 담긴것) -> App -> Detail에 (Movie에 있던 props)가 전달\r\nMovie가 보내준 state는 location 안에 있음\r\nif(location.state === undefined) => state가 없으면 Home으로 돌려보냄\r\nconsole.log(this.props);를 해보면\r\nhistory안에는 url을 변경할수 있는 기능들이 있음 그중 history안에 push 기능이 있음\r\n*/\r\nclass Detail extends React.Component {\r\n    componentDidMount() {\r\n        const { location, history } = this.props;\r\n        if(location.state === undefined) {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n/*render가 componentDidMount()보다 먼저 실행되기에,\r\nstate가 존재하는지 알아보고 존재하지 않으면 componentDidMount()를 통해 Home으로 강제이동\r\n*/\r\n    render() {\r\n        const {location} = this.props;\r\n        if (location.state) {\r\n            return (\r\n            <div className=\"movieDetail__container\">\r\n                    <img src={location.state.poster} \r\n                    alt={location.state.title} \r\n                    title={location.state.title} />\r\n                <div className=\"movieDetail__data\">\r\n                    <h3>{location.state.title}</h3>\r\n                    <h5 className=\"movie__year\">{location.state.year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                    {location.state.genres.map( (genre, index) => (\r\n                        <li key={index} className=\"detail__genres__genre\">\r\n                            {genre}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <p className=\"movie__summary\" >{location.state.summary}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\n/* 지정한 경로로 페이지 이동 및 값보내기( 링크 == 라우터 )\r\n*/\r\nfunction Navigation() {\r\n    return (\r\n        <div className=\"nav\">\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/about\">About</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\n/*라우터는 url을 가지고 확인하고 사용자가 원하는 컴포넌트를 불러옴\r\n즉, 리액트에서 쓰이는 페이지 경로설정*/\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\n\r\nimport Home from \"./routes/Home\";\r\nimport About from \"./routes/About\";\r\nimport Detail from \"./routes/Detail\";\r\nimport Navigation from './components/Navigation';\r\nimport \"./App.css\";\r\n\r\n\r\n/*함수형 컴포넌트\r\n<Route path=\"/about\" component={About} />에서 /about로 가면 About 컴포넌트를 보여줌\r\nexact={true}를 해주면 url이 / 일때만 .home을 렌더링(호출) 해줌(안하면 About이랑 Home이 동시에 렌더링됨)\r\n<Navigation />은 Router 밖에서 쓸수 없음(Link를 쓰기 때문) \r\n모든 Router(HashRouter,Route포함)들은 component={props}를 가짐\r\n\"/movie/:id\" Movie.js에 있는 id변수를 url에 넣음\r\n*/\r\nfunction App() {\r\n    return (\r\n    <HashRouter>\r\n        <Navigation />\r\n        <Route path=\"/\" exact={true} component={Home} />\r\n        <Route path=\"/about\" component={About} />\r\n        <Route path=\"/movie/:id\" component={Detail} />\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n/*리액트는 기본적으로  component(컴포넌트)와 함께 동작함, 모든것은 component 로 이루어져 있음\r\n여기서는 render(<component /> << App이 컴포넌트), component는 HTML을 반환하는 함수\r\n<>이런식으로 component는 JS와 HTML이 섞였다 하여, JSX 라고 부름 이것은 react(리액트)에서만 쓰임\r\nreact(리액트) application(어플리케이션)은 한번에 하나의 component만 redering(렌더링)할 수 있음\r\n따라서 모든것은 App.js에 들어가야함*/\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}